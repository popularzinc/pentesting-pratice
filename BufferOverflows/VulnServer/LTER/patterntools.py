import argparse
seta_default = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
setb_default = "abcdefghijklmnopqrstuvwxyz"
setc_default = "0123456789"
length_default = 600

def make_pattern(seta=seta_default,
             setb=setb_default,
             setc=setc_default,
             length=length_default):
    pattern = ''.join([u+l+d for u in seta for l in setb for d in setc])
    if length is None:
        return pattern
    else:
        if length > len(pattern):
            pattern = pattern * (length / len(pattern) +1)
            return pattern[:length]
        else:
            return pattern[:length]

def toChars(val):
    '''
    Convert a 4 byte number into a string of 4 chars to search pattern for.
    '''
    if len(val) == 4:
        return val
    if val[0:2] == '0x' and len(val) > 8:
        val = val[2:]
    return ''.join(reversed([chr(int(val[i:i+2], 16)) for i in range(0, len(val), 2)]))


def findPattern(needle, pattern, cum_offset=0):
    offset = pattern.find(needle)
    if offset >= 0:
        print("Pattern %s found at offset: %i" % (needle, cum_offset + offset))
        offset = findPattern(needle, pattern[offset+len(needle):], cum_offset + offset)
        return
    if cum_offset == 0:
        print("Pattern %s was not found!" % needle)
    

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate and locate unique string patterns.')

    parser.add_argument('--length' ,'-l', metavar='N', type=int, default=length_default,
                        help='Length of string to generate')
    parser.add_argument('--seta', '-a', metavar='N', type=str, help='First sequence to cycle',
                        default=seta_default)
    parser.add_argument('--setb', '-b', metavar='N', type=str, help='Second sequence to cycle',
                        default=setb_default)
    parser.add_argument('--setc', '-c', metavar='N', type=str, help='Third sequence to cycle',
                        default=setc_default)
    parser.add_argument('--find', '-f', metavar='N', type=str, help='Value to find index of')
    args = parser.parse_args()

    pattern = make_pattern(seta=args.seta, setb=args.setb, setc=args.setc, length=args.length)

    if not args.find:
        print("Inject the following string to overflow:")
        print("")
        print(pattern)
        print("")
        print("Then enter the value to decode:")
        args.find = input()

    needle = toChars(args.find)
    pattern = make_pattern(seta=args.seta, setb=args.setb, setc=args.setc, length=args.length)
    findPattern(needle, pattern)